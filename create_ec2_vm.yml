---
- name: Creating an EC2 Instance with Creating a VPC and Subnet Id
  hosts: localhost
  tasks:

    - name: create a new EC2 key pair, returns generated private key
      amazon.aws.ec2_key:
        name: "{{ prefix }}-ssh-key"
        region: "{{ region }}"
      register: aws_ec2_key_pair

    - debug:
        var: aws_ec2_key_pair

    - name: Create a new VPC 
      amazon.aws.ec2_vpc_net:
        name: "{{ prefix }}-vpc_net"
        cidr_block: "{{ cidr_block }}"
        region: "{{ region }}"
      register: vpc
  
    - name: Create a new Subnet
      amazon.aws.ec2_vpc_subnet:
        cidr: "{{ cidr }}"
        region: "{{ region }}"
        vpc_id: "{{ vpc.vpc.id }}"
      register: subnet

    - name: Create a Security Group  
      amazon.aws.ec2_security_group:
        name: "{{ prefix }}-security_group"
        description: "{{ prefix }}-test-sg"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            ports:
            - 80
            cidr_ip: 0.0.0.0/0
            rule_desc: "allow all on port 80"
          - proto: tcp
            ports:
            - 22 
            cidr_ip: 0.0.0.0/0
            rule_desc: "allow all on port 22"
      register: security_group
    
    - ansible.builtin.debug:
        var: security_group.group_id

    - ansible.builtin.debug:
        var: subnet.subnet.id
    
    - name: Launch an EC2 Instance
      amazon.aws.ec2_instance:
        name: "{{ prefix }}-vm"
        key_name: "{{ prefix }}-ssh-key"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        instance_type: "{{ instance_type }}"
        security_group: "{{ security_group.group_id  }}"
        count: 1
        wait: yes
        wait_timeout: 600
        aws_region: "{{ region }}"
        network:
          assign_public_ip: true
        image_id: "{{ ami }}"
      register: vm

    - debug:
        var: vm

    - debug:
        var: vm.public_ip 

    - name: List all EIP addresses for a VM.
      amazon.aws.ec2_eip_info:
        region: "{{ region }}"
        filters:
          instance-id: "{{ vm.instance_ids[0] }}" 
      register: my_vm_eips

    - debug:
        var: my_vm_eips
